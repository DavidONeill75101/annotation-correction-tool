// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id Int @default(autoincrement()) @id
  username String @unique
  password String
  docsToReview        Document[]
  
}

model Document {
  id                  Int                  @id @default(autoincrement())
  pmid                Int?
  pmcid               Int?
  isFullText          Boolean
  title               String
  contents            String               @db.LongText
  formatting_json     String               @db.LongText
  entityAnnotations   EntityAnnotation[]
  relationAnnotations RelationAnnotation[]
  sentences           Sentence[]
}

model Sentence {
  id                Int                @id @default(autoincrement())
  document          Document           @relation(fields: [documentId], references: [id])
  documentId        Int
  start             Int
  end               Int
  entityAnnotations EntityAnnotation[]
}

model Entity {
  id                Int                @id @default(autoincrement())
  externalId        String
  name              String
  description       String             @db.Text
  isUnlinked        Boolean
  entityType        EntityType         @relation(fields: [entityTypeId], references: [id])
  entityTypeId      Int
  status            EntityStatus
  entityAnnotations EntityAnnotation[]
  synonyms          EntitySynonym[]
  tags              EntityTag[]
  
  @@index([name])
}

enum EntityStatus {
  ADDED_FROM_RESOURCE
  DISABLED_MANUALLY
  OBSOLETE
}

model EntityTag {
  id                Int                @id @default(autoincrement())
  entityType        EntityType         @relation(fields: [entityTypeId], references: [id])
  entityTypeId      Int
  name              String
  entities          Entity[]
}

model EntitySynonym {
  id                Int                @id @default(autoincrement())
  entity            Entity             @relation(fields: [entityId], references: [id])
  entityId          Int
  name              String
  status            SynonymStatus
  entityAnnotations EntityAnnotation[]
  
  @@index([name])
}

enum SynonymStatus {
  ADDED_FROM_RESOURCE
  ADDED_MANUALLY
  REMOVED_MANUALLY
  OBSOLETE
}

model EntityType {
  id               Int      @id @default(autoincrement())
  name             String
  unlinkedEntityId Int
  entities         Entity[]
  entityTags       EntityTag[]
}

model EntityAnnotation {
  id         Int                  @id @default(autoincrement())
  rejected   Boolean
  start      Int
  end        Int
  score      Float
  entity     Entity               @relation(fields: [entityId], references: [id])
  entityId   Int
  document   Document             @relation(fields: [documentId], references: [id])
  documentId Int
  sentence   Sentence?            @relation(fields: [sentenceId], references: [id])
  sentenceId Int?
  user       User                 @relation(fields: [userId], references: [id])
  userId     Int
  synonym    EntitySynonym?       @relation(fields: [synonymId], references: [id])
  synonymId  Int?
  asSrc      RelationAnnotation[] @relation("src")
  asDst      RelationAnnotation[] @relation("dst")
}

model RelationType {
  id                  Int                  @id @default(autoincrement())
  name                String
  description         String
  relationAnnotations RelationAnnotation[]
}

model RelationAnnotation {
  id             Int              @id @default(autoincrement())
  relationType   RelationType     @relation(fields: [relationTypeId], references: [id])
  relationTypeId Int
  document       Document         @relation(fields: [documentId], references: [id])
  documentId     Int
  src            EntityAnnotation @relation("src", fields: [srcId], references: [id])
  srcId          Int
  dst            EntityAnnotation @relation("dst", fields: [dstId], references: [id])
  dstId          Int
  user           User             @relation(fields: [userId], references: [id])
  userId         Int
}

model User {
  id                  Int                  @id @default(autoincrement())
  username            String
  isBot               Boolean
  entityAnnotations   EntityAnnotation[]
  relationAnnotations RelationAnnotation[]
}
