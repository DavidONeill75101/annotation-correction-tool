// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                  Int              @id @default(autoincrement())
  email               String           @unique
  upvoted_sentences   UserUpvote[]
  downvoted_sentences UserDownvote[]
  UserAnnotation      UserAnnotation[]
  read_guide          Boolean          @default(false)

  @@map("users")
}

model UserUpvote {
  sentence   Sentence @relation(fields: [sentenceId], references: [id])
  sentenceId Int      @map("sentence_id")
  user       User     @relation(fields: [userId], references: [id])
  userId     Int      @map("user_id")

  @@id([sentenceId, userId])
  @@map("user_upvote")
}

model UserDownvote {
  sentence   Sentence @relation(fields: [sentenceId], references: [id])
  sentenceId Int      @map("sentence_id")
  user       User     @relation(fields: [userId], references: [id])
  userId     Int      @map("user_id")

  @@id([sentenceId, userId])
  @@map("user_downvote")
}

model Sentence {
  id               Int              @id @default(autoincrement())
  matching_id      String
  pmid             Int
  title            String
  journal          String
  year             Int
  month            String
  day              Int
  section          String
  subsection       String
  evidencetype     String
  cancer           String
  gene             String
  drug             String
  variant_group    String
  sentence         String
  formatted        String
  user_upvotes     UserUpvote[]
  user_downvotes   UserDownvote[]
  user_annotations UserAnnotation[]

  @@map("sentences")
}

model relation {
  id             Int    @id @default(autoincrement())
  matching_id    String
  evidencetype   String
  gene           String
  cancer         String
  drug           String
  variant_group  String
  citation_count Int
}

model UserAnnotation {
  id         Int                  @id @default(autoincrement())
  sentence   Sentence             @relation(fields: [sentenceId], references: [id])
  sentenceId Int                  @map("sentence_id")
  user       User                 @relation(fields: [userId], references: [id])
  userId     Int                  @map("user_id")
  relations  RelationAnnotation[]
}

model EntityAnnotation {
  id                   Int                 @id @default(autoincrement())
  entityType           EntityType          @relation(fields: [entityTypeId], references: [id])
  start                Int
  offset               Int
  RelationAnnotation   RelationAnnotation? @relation(fields: [relationAnnotationId], references: [id])
  relationAnnotationId Int?
  entityTypeId         Int
}

model EntityType {
  id               Int                @id @default(autoincrement())
  name             String
  EntityAnnotation EntityAnnotation[]
}

model RelationAnnotation {
  id                Int                @id @default(autoincrement())
  relationType      RelationType       @relation(fields: [relationTypeId], references: [id])
  relationTypeId    Int
  entityAnnotations EntityAnnotation[]
  UserAnnotation    UserAnnotation?    @relation(fields: [userAnnotationId], references: [id])
  userAnnotationId  Int?
  variant           Variant?           @relation(fields: [variantId], references: [id])
  variantId         Int?
  cancer            Cancer?            @relation(fields: [cancerId], references: [id])
  cancerId          Int?
  gene              Gene?              @relation(fields: [geneId], references: [id])
  geneId            Int?
  drug              Drug?              @relation(fields: [drugId], references: [id])
  drugId            Int?

}

model RelationType {
  id                 Int                  @id @default(autoincrement())
  name               String
  RelationAnnotation RelationAnnotation[]
}

model Gene {
  id                 Int                  @id
  name               String
  GeneSynonym        GeneSynonym[]
  RelationAnnotation RelationAnnotation[]
}

model GeneSynonym {
  id     Int    @id @default(autoincrement())
  name   String
  gene   Gene   @relation(fields: [geneId], references: [id])
  geneId Int
}

model Cancer {
  id                 Int                  @id
  name               String
  CancerSynonym      CancerSynonym[]
  RelationAnnotation RelationAnnotation[]
}

model CancerSynonym {
  id       Int    @id @default(autoincrement())
  name     String
  cancer   Cancer @relation(fields: [cancerId], references: [id])
  cancerId Int
}

model Drug {
  id                 Int                  @id
  name               String
  DrugSynonym        DrugSynonym[]
  RelationAnnotation RelationAnnotation[]
}

model DrugSynonym {
  id     Int    @id @default(autoincrement())
  name   String
  drug   Drug   @relation(fields: [drugId], references: [id])
  drugId Int
}

model Variant {
  id                 Int                  @id
  name               String
  VariantSynonym     VariantSynonym[]
  RelationAnnotation RelationAnnotation[]
}

model VariantSynonym {
  id        Int     @id @default(autoincrement())
  name      String
  variant   Variant @relation(fields: [variantId], references: [id])
  variantId Int
}

generator erd {
  provider = "prisma-erd-generator"
}
